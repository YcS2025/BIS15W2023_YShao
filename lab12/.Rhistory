theme_light(base_size = 18)
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(shiny)
library(shinydashboard)
UC_admit <- readr::read_csv("data/UC_admit.csv")
glimpse(UC_admit)
UC_admit <- UC_admit %>%
filter(Ethnicity!="All")
ui <- dashboardPage(
dashboardHeader(title = "UC Campus Admissions by Ethnicity 2010-2019"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
radioButtons("x", "Select Year", choices = c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019"),
selected = "2010"),
selectInput("y", "Select Campus", choices = c("Davis", "Irvine", "Berkeley", "Irvine", "Los_Angeles", "Merced", "Riverside", "San_Diego", "Santa_Barbara", "Santa_Cruz"),
selected = "Davis"),
selectInput("z", "Select Admit Category", choices = c("Applicants", "Admits", "Enrollees"),
selected = "Applicants")
), # close the first box
box(title = "UC Admissions", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
UC_admit %>%
filter(Academic_Yr==input$x & Campus==input$y & Category==input$z) %>%
ggplot(aes(x=reorder(Ethnicity, FilteredCountFR), y=FilteredCountFR)) +
geom_col(color="blue", fill="grey", alpha=0.9) +
theme_light(base_size = 18) +
theme(axis.text.x = element_text(angle = 60, hjust = 1))+
labs(x = "Ethnicity", y = "Number")
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
UC_admit$Academic_Yr <- as.factor(UC_admit$Academic_Yr)
ui <- dashboardPage(
dashboardHeader(title = "UC Campus Admissions by Year and Ethnicity"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select Campus", choices = c("Davis", "Irvine", "Berkeley", "Irvine", "Los_Angeles", "Merced", "Riverside", "San_Diego", "Santa_Barbara", "Santa_Cruz"),
selected = "Davis"),
selectInput("z", "Select Admit Category", choices = c("Applicants", "Admits", "Enrollees"),
selected = "Applicants"),
radioButtons("y", "Select Ethnicity", choices = c("International", "Unknown", "White", "Asian", "Chicano/Latino", "American Indian", "African American"),
selected = "International")
), # close the first box
box(title = "UC Admissions", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
UC_admit %>%
filter(Campus==input$x & Ethnicity==input$y & Category==input$z) %>%
ggplot(aes(x=Academic_Yr, y=FilteredCountFR)) +
geom_col(color="green", fill="purple", alpha=0.7) +
theme_light(base_size = 18) +
theme(axis.text.x = element_text(angle = 60, hjust = 1))+
labs(x = "Year", y = "Enrollment")
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
gabon <- readr::read_csv("data/IvindoData_DryadVersion.csv")
names(gabon)
glimpse(gabon)
ui <- dashboardPage(
dashboardHeader(title = "Relative Abundance"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select RA Taxon", choices = c("RA_Apes", "RA_Birds", "RA_Elephant", "RA_Monkeys", "RA_Rodent", "RA_Ungulate"),
selected = "RA_Apes"),
hr(),
helpText("Reference: Koerner SE, Poulsen JR, Blanchard EJ, Okouyi J, Clark CJ. Vertebrate community composition and diversity declines along a defaunation gradient radiating from rural villages in Gabon. Journal of Applied Ecology. 2016.")
), # close the first box
box(title = "Relative Abundance %", width = 6,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
gabon %>%
ggplot(aes_string(x = "Distance", y = input$x)) +
geom_point(size=4)+
geom_smooth(method=lm, se=T)+
scale_x_continuous(breaks=seq(0, 30, by = 5))+ theme_light(base_size = 18)
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
UC_admit$Academic_Yr <- as.factor(UC_admit$Academic_Yr)
ui <- dashboardPage(
dashboardHeader(title = "UC Campus Admissions by Year and Ethnicity"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select Campus", choices = c("Davis", "Irvine", "Berkeley", "Irvine", "Los_Angeles", "Merced", "Riverside", "San_Diego", "Santa_Barbara", "Santa_Cruz"),
selected = "Davis"),
selectInput("z", "Select Admit Category", choices = c("Applicants", "Admits", "Enrollees"),
selected = "Applicants"),
radioButtons("y", "Select Ethnicity", choices = c("International", "Unknown", "White", "Asian", "Chicano/Latino", "American Indian", "African American"),
selected = "International")
), # close the first box
box(title = "UC Admissions", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
UC_admit %>%
filter(Campus==input$x & Ethnicity==input$y & Category==input$z) %>%
ggplot(aes(x=Academic_Yr, y=FilteredCountFR)) +
geom_col(color="green", fill="purple", alpha=0.7) +
theme_light(base_size = 18) +
theme(axis.text.x = element_text(angle = 60, hjust = 1))+
labs(x = "Year", y = "Enrollment")
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
runApp('wolf.R')
runApp('wolf.R')
runApp('wolf.R')
runApp('wolf.R')
runApp('wolf.R')
runApp('wolf.R')
runApp('wolf.R')
ui <- dashboardPage(
dashboardHeader(title = "Wolves sex distribution"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
radioButtons("x", "Select Pop", choices = c("AK.PEN","Ban.JAS", "BC","DENALI", "ELLES","GTNP", "INT.AK","MEXICAN","MI", "MT","N.NWT","ONT","SE.AK","SNF","SS.NWT","YNP","YUCH"),
selected = NULL)
),
plotOutput("plot", width="600px", height="500px")
)
)
)
server <- function(input, output, session) {
output$plot <- renderPlot({
wolves%>%
filter(sex!="NA") %>%
ggplot(aes_string(x="sex", fill=input$x)) +
geom_bar(position="dodge", alpha=0.8, color="pink") +
theme_light(base_size=16) +
labs(x=NULL, y=NULL, fill="Fill Variable")
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
wolves <- read_csv("data/wolves_data/wolves_dataset.csv")
names(wolves)
wolves %>%
filter(sex!="NA") %>%
ggplot(aes(x=sex, fill=sex))+
geom_bar()+
facet_wrap(~pop)
ui <- dashboardPage(
dashboardHeader(title = "Wolves sex distribution"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
radioButtons("x", "Select Pop", choices = c("AK.PEN","Ban.JAS", "BC","DENALI", "ELLES","GTNP", "INT.AK","MEXICAN","MI", "MT","N.NWT","ONT","SE.AK","SNF","SS.NWT","YNP","YUCH"),
selected = NULL)
),
plotOutput("plot", width="600px", height="500px")
)
)
)
server <- function(input, output, session) {
output$plot <- renderPlot({
wolves%>%
filter(sex!="NA") %>%
ggplot(aes_string(x="sex", fill=input$x)) +
geom_bar(position="dodge", alpha=0.8, color="pink") +
theme_light(base_size=16) +
labs(x=NULL, y=NULL, fill="Fill Variable")
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
runApp('plot_iris.R')
wolves %>%
filter(sex!="NA") %>%
ggplot(aes(x=sex, fill=sex))+
geom_bar()+
facet_wrap(~pop)
table(wolves$pop)
wolves %>%
filter(sex!="NA") %>%
ggplot(aes(x=sex, fill=sex))+
geom_bar()+
facet_wrap(~pop)
?toJSON
table(wolves$pop)
runApp('wolf.R')
ui <- dashboardPage(
dashboardHeader(title = "UC Campus Admissions by Ethnicity 2010-2019"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
radioButtons("x", "Select Year", choices = c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019"),
selected = "2010"),
selectInput("y", "Select Campus", choices = c("Davis", "Irvine", "Berkeley", "Irvine", "Los_Angeles", "Merced", "Riverside", "San_Diego", "Santa_Barbara", "Santa_Cruz"),
selected = "Davis"),
selectInput("z", "Select Admit Category", choices = c("Applicants", "Admits", "Enrollees"),
selected = "Applicants")
), # close the first box
box(title = "UC Admissions", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
UC_admit %>%
filter(Academic_Yr==input$x & Campus==input$y & Category==input$z) %>%
ggplot(aes(x=reorder(Ethnicity, FilteredCountFR), y=FilteredCountFR)) +
geom_col(color="blue", fill="grey", alpha=0.9) +
theme_light(base_size = 18) +
theme(axis.text.x = element_text(angle = 60, hjust = 1))+
labs(x = "Ethnicity", y = "Number")
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
wolves %>%
filter(sex!="NA") %>%
ggplot(aes(x=sex, fill=sex))+
geom_bar()+
facet_wrap(~pop)
?toJSON
table(wolves$year)
runApp('wolf.R')
runApp('wolf.R')
runApp('wolf.R')
runApp('wolf.R')
runApp('wolf.R')
runApp('wolf.R')
runApp('wolf.R')
runApp('wolf.R')
runApp('wolf.R')
runApp('wolf.R')
runApp('wolf.R')
UC_admit$Academic_Yr <- as.factor(UC_admit$Academic_Yr)
ui <- dashboardPage(
dashboardHeader(title = "UC Campus Admissions by Year and Ethnicity"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select Campus", choices = c("Davis", "Irvine", "Berkeley", "Irvine", "Los_Angeles", "Merced", "Riverside", "San_Diego", "Santa_Barbara", "Santa_Cruz"),
selected = "Davis"),
selectInput("z", "Select Admit Category", choices = c("Applicants", "Admits", "Enrollees"),
selected = "Applicants"),
radioButtons("y", "Select Ethnicity", choices = c("International", "Unknown", "White", "Asian", "Chicano/Latino", "American Indian", "African American"),
selected = "International")
), # close the first box
box(title = "UC Admissions", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
UC_admit %>%
filter(Campus==input$x & Ethnicity==input$y & Category==input$z) %>%
ggplot(aes(x=Academic_Yr, y=FilteredCountFR)) +
geom_col(color="green", fill="purple", alpha=0.7) +
theme_light(base_size = 18) +
theme(axis.text.x = element_text(angle = 60, hjust = 1))+
labs(x = "Year", y = "Enrollment")
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
runApp('wolf.R')
runApp('wolf.R')
UC_admit$Academic_Yr <- as.factor(UC_admit$Academic_Yr)
ui <- dashboardPage(
dashboardHeader(title = "UC Campus Admissions by Year and Ethnicity"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select Campus", choices = c("Davis", "Irvine", "Berkeley", "Irvine", "Los_Angeles", "Merced", "Riverside", "San_Diego", "Santa_Barbara", "Santa_Cruz"),
selected = "Davis"),
selectInput("z", "Select Admit Category", choices = c("Applicants", "Admits", "Enrollees"),
selected = "Applicants"),
radioButtons("y", "Select Ethnicity", choices = c("International", "Unknown", "White", "Asian", "Chicano/Latino", "American Indian", "African American"),
selected = "International")
), # close the first box
box(title = "UC Admissions", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
UC_admit %>%
filter(Campus==input$x & Ethnicity==input$y & Category==input$z) %>%
ggplot(aes(x=Academic_Yr, y=FilteredCountFR)) +
geom_col(color="green", fill="purple", alpha=0.7) +
theme_light(base_size = 18) +
theme(axis.text.x = element_text(angle = 60, hjust = 1))+
labs(x = "Year", y = "Enrollment")
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
runApp('wolf.R')
runApp('wolf.R')
runApp('wolf.R')
runApp('wolf.R')
runApp('wolf.R')
wolves <- read_csv("data/wolves_data/wolves_dataset.csv")
wolves_filter<-wolves%>%
filter(sex!="NA")
ui <-dashboardPage(
dashboardHeader(title = "Wolves sex distribution"),
dashboardSidebar(),
dashboardBody(
fluidPage(
box(title = "Plot Options", width = 3,
radioButtons("x", "Select Pop", choices = c("AK.PEN","BAN.JAS", "BC","DENALI", "ELLES","GTNP", "INT.AK","MEXICAN","MI", "MT","N.NWT","ONT","SE.AK","SNF","SS.NWT","YNP","YUCH"),
selected = "BC"),
),
box(title = "Sex distribution", width = 7,
plotOutput("plot", width="600px", height="500px")
))))
server <- function(input, output, session) {
output$plot <- renderPlot({
wolves_filter %>%
filter(pop==input$x) %>%
ggplot(aes(x=pop, fill=sex)) +
geom_bar(position = "dodge") +
theme_light(base_size = 18) +
theme(axis.text.x = element_text(angle = 60, hjust = 1))+
labs(x = "Pop", y = NULL)
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(shiny)
library(shinydashboard)
UC_admit <- readr::read_csv("data/UC_admit.csv")
glimpse(UC_admit)
UC_admit <- UC_admit %>%
filter(Ethnicity!="All")
ui <- dashboardPage(
dashboardHeader(title = "UC Campus Admissions by Ethnicity 2010-2019"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
radioButtons("x", "Select Year", choices = c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019"),
selected = "2010"),
selectInput("y", "Select Campus", choices = c("Davis", "Irvine", "Berkeley", "Irvine", "Los_Angeles", "Merced", "Riverside", "San_Diego", "Santa_Barbara", "Santa_Cruz"),
selected = "Davis"),
selectInput("z", "Select Admit Category", choices = c("Applicants", "Admits", "Enrollees"),
selected = "Applicants")
), # close the first box
box(title = "UC Admissions", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
UC_admit %>%
filter(Academic_Yr==input$x & Campus==input$y & Category==input$z) %>%
ggplot(aes(x=reorder(Ethnicity, FilteredCountFR), y=FilteredCountFR)) +
geom_col(color="blue", fill="grey", alpha=0.9) +
theme_light(base_size = 18) +
theme(axis.text.x = element_text(angle = 60, hjust = 1))+
labs(x = "Ethnicity", y = "Number")
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
UC_admit$Academic_Yr <- as.factor(UC_admit$Academic_Yr)
ui <- dashboardPage(
dashboardHeader(title = "UC Campus Admissions by Year and Ethnicity"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select Campus", choices = c("Davis", "Irvine", "Berkeley", "Irvine", "Los_Angeles", "Merced", "Riverside", "San_Diego", "Santa_Barbara", "Santa_Cruz"),
selected = "Davis"),
selectInput("z", "Select Admit Category", choices = c("Applicants", "Admits", "Enrollees"),
selected = "Applicants"),
radioButtons("y", "Select Ethnicity", choices = c("International", "Unknown", "White", "Asian", "Chicano/Latino", "American Indian", "African American"),
selected = "International")
), # close the first box
box(title = "UC Admissions", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
UC_admit %>%
filter(Campus==input$x & Ethnicity==input$y & Category==input$z) %>%
ggplot(aes(x=Academic_Yr, y=FilteredCountFR)) +
geom_col(color="green", fill="purple", alpha=0.7) +
theme_light(base_size = 18) +
theme(axis.text.x = element_text(angle = 60, hjust = 1))+
labs(x = "Year", y = "Enrollment")
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
gabon <- readr::read_csv("data/IvindoData_DryadVersion.csv")
wolves <- read_csv("data/wolves_data/wolves_dataset.csv")
wolves_filter<-wolves%>%
filter(sex!="NA")
ui <-dashboardPage(
dashboardHeader(title = "Wolves sex distribution"),
dashboardSidebar(),
dashboardBody(
fluidPage(
box(title = "Plot Options", width = 3,
radioButtons("x", "Select Pop", choices = c("AK.PEN","BAN.JAS", "BC","DENALI", "ELLES","GTNP", "INT.AK","MEXICAN","MI", "MT","N.NWT","ONT","SE.AK","SNF","SS.NWT","YNP","YUCH"),
selected = "BC"),
),
box(title = "Sex distribution", width = 7,
plotOutput("plot", width="600px", height="500px")
))))
server <- function(input, output, session) {
output$plot <- renderPlot({
wolves_filter %>%
filter(pop==input$x) %>%
ggplot(aes(x=pop, fill=sex)) +
geom_bar(position = "dodge") +
theme_light(base_size = 18) +
theme(axis.text.x = element_text(angle = 60, hjust = 1))+
labs(x = "Pop", y = NULL)
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
wolves <- read_csv("data/wolves_data/wolves_dataset.csv")
wolves_filter<-wolves%>%
filter(sex!="NA")
ui <-dashboardPage(
dashboardHeader(title = "Wolves sex distribution"),
dashboardSidebar(),
dashboardBody(
fluidPage(
box(title = "Plot Options", width = 3,
radioButtons("x", "Select Pop", choices = c("AK.PEN","BAN.JAS", "BC","DENALI", "ELLES","GTNP", "INT.AK","MEXICAN","MI", "MT","N.NWT","ONT","SE.AK","SNF","SS.NWT","YNP","YUCH"),
selected = "BC"),
),
box(title = "Sex distribution", width = 7,
plotOutput("plot", width="600px", height="500px")
))))
server <- function(input, output, session) {
output$plot <- renderPlot({
wolves_filter %>%
filter(pop==input$x) %>%
ggplot(aes(x=pop, fill=sex)) +
geom_bar(position = "dodge") +
theme_light(base_size = 18) +
theme(axis.text.x = element_text(angle = 60, hjust = 1))+
labs(x = NULL, y = "NUM")
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
runApp('wolf.R')
